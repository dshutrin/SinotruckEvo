# Generated by Django 5.1.1 on 2024-10-10 05:17

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(default=None, max_length=150, unique=True, verbose_name='Имя пользователя')),
                ('email', models.EmailField(blank=True, default=None, max_length=254, null=True, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(default=None, max_length=150, null=True, verbose_name='Имя')),
                ('surname', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Фамилия')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'auth_user',
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Дата, время')),
                ('act', models.CharField(max_length=255, verbose_name='Действие')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Активность',
                'verbose_name_plural': 'Активности',
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название папки')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('parent_folder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='support.folder')),
            ],
            options={
                'verbose_name': 'Папка',
                'verbose_name_plural': 'Папки',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название документа')),
                ('file', models.FileField(upload_to='documents', verbose_name='Файл')),
                ('doctype', models.CharField(blank=True, default=None, max_length=10, null=True, verbose_name='Тип файла')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('folder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='support.folder')),
            ],
            options={
                'verbose_name': 'Документ',
                'verbose_name_plural': 'Документы',
            },
        ),
        migrations.CreateModel(
            name='PriceList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('last_update', models.DateTimeField(verbose_name='Последнее обновление')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial', models.CharField(max_length=100, verbose_name='Номенклатура.Артикул')),
                ('count', models.PositiveIntegerField(null=True, verbose_name='Остаток')),
                ('name', models.CharField(max_length=250, null=True, verbose_name='Ценовая группа/ Номенклатура')),
                ('manufacturer', models.CharField(max_length=250, null=True, verbose_name='Марки')),
                ('price', models.FloatField(default=None, null=True, verbose_name='Стоимость')),
                ('pricelist', models.ForeignKey(blank=True, default=None, on_delete=django.db.models.deletion.CASCADE, to='support.pricelist')),
            ],
            options={
                'verbose_name': 'Продукт',
                'verbose_name_plural': 'Продукты',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Роль')),
                ('file_sharing_create_file_permission', models.BooleanField(default=False, verbose_name='Возможность создавать файлы в файлообменнике')),
                ('file_sharing_download_file_permission', models.BooleanField(default=False, verbose_name='Возможность скачивать файлы в файлообменнике (Влияет на доступ к меню)')),
                ('file_sharing_create_folder_permission', models.BooleanField(default=False, verbose_name='Возможность создавать папки в файлообменнике')),
                ('file_sharing_delete_folder_permission', models.BooleanField(default=False, verbose_name='Возможность удалять папки в файлообменнике')),
                ('price_list_update_list_permission', models.BooleanField(default=False, verbose_name='Возможность обновлять прайс-лист')),
                ('price_list_download_list_permission', models.BooleanField(default=False, verbose_name='Возможность скачивать прайс-лист')),
                ('price_list_view_list_permission', models.BooleanField(default=False, verbose_name='Возможность просматривать прайс-лист (Влияет на доступ к меню)')),
                ('trash_permission', models.BooleanField(default=False, verbose_name='Возможность добавлять товары в корзину и оставлять заявку заказов (Влияет на доступ к меню)')),
                ('order_view_permission', models.BooleanField(default=False, verbose_name='Возможность просматривать заявки заказов (Влияет на доступ к меню)')),
                ('activity_view_permission', models.ManyToManyField(blank=True, to='support.role', verbose_name='Чью активность разрешено просматривать (Влияет на доступ к меню)')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='role',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='support.role', verbose_name='Роль'),
        ),
    ]
